Design a simple, clean, and modern UI for a social media web application. Focus on usability and clarity over decoration. The app has the following main screens:

Login Page
Form with fields: Email, Password, and Login button.
Link to ‚ÄúRegister‚Äù page.
Minimal layout, centered form, logo on top.

Register Page
Fields: Username, Email, Password, Confirm Password.
Submit button.
Link back to Login.

Home Feed (Post List)
Vertical scroll of posts (like Twitter/Facebook).
Each post includes:
User avatar + username
Post content (text, image/video)
Buttons: Like, Comment, Edit (if owner), Delete
Floating button to ‚ÄúCreate New Post‚Äù.

Create Post Page
Form: Text Area + Image/Video Upload
Submit button.
Simple preview after selecting media.

Post Detail Page
Full post view.
Show all comments under post.
Add comment input box below.
Buttons: Like, Edit/Delete (if owner)

Profile Page
User avatar (with upload/edit)
Username, bio/info
Button: Edit Profile
List of user‚Äôs posts below.

Edit Profile Page
Editable fields: Avatar (image), Username, Bio.
Save button.

Search Page
Top search bar (always visible or sticky).
Show result in list:
Users (avatar + name + link to profile)
Posts (snippet + link to detail)

Chat UI
2-column layout:
Left: List of conversations (with user avatars, unread badge)
Right: Messages in conversation (bubbles)
Input at bottom to send message.
Real-time (WebSocket-ready)

Settings Page
Change password form.
Logout button.
(Optional) toggle for dark/light mode.

Navigation Bar (top or sidebar)
Home üè†
Search üîç
Notifications üîî
Messages üí¨
Profile üë§

Use simple card-based UI, clear typography (like Inter, Roboto), consistent spacing and rounded corners (8px or 12px). The layout should be responsive (mobile/tablet/desktop). Color palette: white background, light gray borders, blue accent color.

Explain how the frontend (React.js) of a social media application should interact with the backend API (Spring Boot microservices). Assume the backend provides authentication via JWT tokens and exposes RESTful endpoints. Describe how each UI page should fetch or send data to the corresponding backend service.

Authentication (Login/Register)

Use POST /api/v1/auth/login and POST /api/v1/auth/register
After successful login, store the JWT token in localStorage or HttpOnly cookie
Attach token to Authorization header (Bearer <token>) for all authenticated requests
Fetching Feed

Use GET /api/v1/posts/feed?page=1&size=10
Attach JWT token in Authorization header
Show paginated posts on UI
Create Post

Use POST /api/v1/posts
Send post content and media in a multipart/form-data request
Attach JWT token
Like / Unlike Post

Use POST /api/v1/likes/{postId} to toggle like
Update UI based on like status returned
Add Comment

Use POST /api/v1/comments/{postId}
Send comment content in JSON
Refresh comments section after posting
User Profile

Use GET /api/v1/users/{username} to fetch user info
Use GET /api/v1/users/{username}/posts to fetch user's posts
Use POST /api/v1/users/{username}/follow to follow/unfollow
Search Users / Posts

Use GET /api/v1/search?query=term
Display results grouped by users and posts
Notifications

Use GET /api/v1/notifications
Poll this endpoint periodically or use WebSocket in future
Change Password / Logout

POST /api/v1/auth/change-password
POST /api/v1/auth/logout
Frontend should handle:

Token refresh using POST /api/v1/auth/refresh when token expires
Route protection (e.g., redirect to login if not authenticated)
Showing loading spinners and error messages during fetch calls
finnaly, refer to BE code of this project and file test.txt, endpoint.txt
